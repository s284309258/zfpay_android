apply plugin: 'com.android.application'
apply from: "../conf.gradle"
apply from: '../MobSDK.gradle'
if (useTingyun.toBoolean()) {
    apply plugin: 'newlens'
}
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    defaultConfig {
        applicationId "com.lckj.zfqg"
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode 15
        versionName "1.1.4"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
        multiDexKeepProguard file('tinker_multidexkeep.pro')
        // keep specific classes using proguard syntax
        multiDexKeepFile file('maindexlist.txt') // keep specific classes
    }

    repositories {
        flatDir {
            dirs 'libs'
        }
    }
    configurations {
        cleanedAnnotations
        compile.exclude group: 'org.jetbrains' , module:'annotations'
    }
    compileOptions {
        sourceCompatibility 1.8
        targetCompatibility 1.8
    }
    signingConfigs {
        def Properties props = new Properties()
        def propFile = file('private.properties')
        props.load(new FileInputStream(propFile))
        if (propFile.canRead()) {
            release {
                storeFile file(props['STORE_FILE'])
                storePassword props['STORE_PASSWORD']
                keyPassword props['KEY_PASSWORD']
                keyAlias props['KEY_ALIAS']
            }
        } else {
            println 'RELEASE BUILD NOT FOUND SIGNING FILE'
            android.buildTypes.release.signingConfig = null

        }
    }
    lintOptions {
        abortOnError false
    }
    buildTypes {
        debug {
            resValue("bool", "useTingyun" , "${useTingyun}")
            signingConfig signingConfigs.release
        }
        release {
            resValue("bool", "useTingyun" , "${useTingyun}")
            signingConfig signingConfigs.release
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    /*dexOptions {
        jumboMode = true
        *//*additionalParameters = ['--multi-dex', '--main-dex-list='+ project.rootDir.absolutePath + '/jycm/maindexlist.txt', '--minimal-main-dex',
                                '--set-max-idx-number=1000']*//*
        additionalParameters = [//dex参数详见 dx --help
                                '--multi-dex',//多分包
                                '--set-max-idx-number=60000',//每个包内方法数上限
                                '--main-dex-list='+project.rootDir.absolutePath + '/jycm/maindexlist.txt',//打包进主classes.dex的文件列表
                                '--minimal-main-dex'//使上一句生效
        ]
    }*/
    dexOptions {
        preDexLibraries = false
        javaMaxHeapSize "4g"     //增加java堆内存大小
        additionalParameters = [//dex参数详见 dx --help
                                '--multi-dex',//多分包
                                '--set-max-idx-number=60000',//每个包内方法数上限
                                '--main-dex-list=' + projectDir + '/maindexlist.txt',//打包进主classes.dex的文件列表
                                '--minimal-main-dex'//使上一句生效
        ]
    }


}
/*//2
afterEvaluate {
    tasks.matching {
        it.name.startsWith('dex')
    }.each { dx ->
        def listFile = project.rootDir.absolutePath+'/multiDexKeep.txt'
        if (dx.additionalParameters == null) {
            dx.additionalParameters = []
        }
        //表示当方法数越界时则生成多个dex文件（我的没有越界，貌似也生成了两个）
        dx.additionalParameters += '--multi-dex'
        //这个指定了listFile中的类（即maindexlist.txt中的类）会打包到主dex中，不过注意下一条。
        dx.additionalParameters += '--main-dex-list=' +listFile
        //表明只有-main-dex-list所指定的类（在我的配置中，就是app目录下的maindexlist.txt中包含的类）才能打包到主dex中，如果没有这个选项，上个选项就会失效
        dx.additionalParameters += '--minimal-main-dex'
    }
}*/

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    //noinspection GradleCompatible
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
    implementation files('libs/AMap3DMap_6.5.0_AMapNavi_6.5.0_AMapSearch_6.5.0_AMapLocation_4.4.0_20181122.jar')
    //����ˢ��
    implementation 'com.scwang.smartrefresh:SmartRefreshLayout:1.0.5.1'
    implementation 'com.scwang.smartrefresh:SmartRefreshHeader:1.0.5.1'
    //��Ƭ
    implementation 'com.android.support:cardview-v7:28.0.0'
    //�б�
    implementation 'com.android.support:recyclerview-v7:28.0.0'
    implementation 'com.youth.banner:banner:1.4.10'
    implementation rootProject.ext.dependencies["design"]
    implementation rootProject.ext.dependencies["glide"]
    implementation rootProject.ext.dependencies["glidetransf"]
    implementation rootProject.ext.dependencies["eventbus"]
    implementation rootProject.ext.dependencies["butterknife"]
    implementation rootProject.ext.dependencies["rxjava"]
    //    api rootProject.ext.dependencies["rxlife2"]
    implementation rootProject.ext.dependencies["rxandroid"]
    implementation rootProject.ext.dependencies["retrofit"]
    implementation rootProject.ext.dependencies["retrofit-converter-gson"]
    implementation rootProject.ext.dependencies["retrofit-adapter-rxjava"]
    implementation rootProject.ext.dependencies["okhttp3"]
    implementation rootProject.ext.dependencies["okhttp3-logging-interceptor"]
    implementation rootProject.ext.dependencies["fastjson"]
    implementation rootProject.ext.dependencies["bugly"]
    implementation rootProject.ext.dependencies["constraint"]
    kapt 'com.google.dagger:dagger-compiler:2.11'
    implementation rootProject.ext.dependencies["butterknife"]
    kapt rootProject.ext.dependencies["butterknife-compiler"]
    api rootProject.ext.dependencies["design"]
    implementation project(':lckjlib')
    implementation project(':network')
    implementation project(':utilslib')
//    implementation project(':ucrop')
    //    城市选择
    //    implementation 'com.zaaach:citypicker:2.0.3'
    implementation project(':citypicker')
    implementation project(':picture_library')
    //必选
    implementation 'com.networkbench.newlens.agent.android:nbs.newlens.agent:2.13.0'
    // 若使用annotation需要单独引用,对于tinker的其他库都无需再引用
    kapt "com.tinkerpatch.tinker:tinker-android-anno:1.9.9"
    api 'com.tinkerpatch.sdk:tinkerpatch-android-sdk:1.2.9'
    implementation 'com.github.maning0303:MNPasswordEditText:V1.0.2'
    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'
    implementation 'com.gongwen:marqueelibrary:1.1.3'
    //視頻緩存策略
    implementation('com.danikula:videocache:2.7.0') {
        exclude group: 'org.slf4j', module: 'slf4j-android'
    }
    implementation 'com.contrarywind:Android-PickerView:4.1.8'
    implementation(name: 'agentlibrary-release-1.0.7', ext: 'aar')
    implementation(name: 'appFrameLib-release-1.0.7', ext: 'aar')
    implementation(name: 'picture_library-release-1.0.7', ext: 'aar')
    implementation(name: 'pickerview-release-1.0.7', ext: 'aar')
    implementation(name: 'ucrop-release-1.0.7', ext: 'aar')
//    implementation project(':ucrop-release-1.0.7')
    implementation 'com.hyman:flowlayout-lib:1.1.2'
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'com.trello.rxlifecycle2:rxlifecycle:2.2.1'
    implementation 'com.trello.rxlifecycle2:rxlifecycle-android:2.2.1'
    implementation 'com.trello.rxlifecycle2:rxlifecycle-components:2.2.1'
    implementation 'com.orhanobut:logger:2.2.0'
    implementation files('libs/log4j-1.2.16.jar')
    implementation files('libs/slf4j-api-1.6.1.jar')
    implementation files('libs/slf4j-log4j12-1.6.1.jar')
}

apply from: 'tinkerpatch.gradle'
